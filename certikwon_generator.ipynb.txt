{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2gJPUkgU5Hxg",
        "outputId": "15b4b9c2-f949-4398-9fa8-a14b7860760b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üîß Installing required packages...\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.12/dist-packages (11.3.0)\n",
            "Requirement already satisfied: google-generativeai in /usr/local/lib/python3.12/dist-packages (0.8.5)\n",
            "Requirement already satisfied: google-ai-generativelanguage==0.6.15 in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (0.6.15)\n",
            "Requirement already satisfied: google-api-core in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (2.25.1)\n",
            "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (2.182.0)\n",
            "Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (2.38.0)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (5.29.5)\n",
            "Requirement already satisfied: pydantic in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (2.11.9)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (4.67.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.12/dist-packages (from google-generativeai) (4.15.0)\n",
            "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.12/dist-packages (from google-ai-generativelanguage==0.6.15->google-generativeai) (1.26.1)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.0,>=1.56.2 in /usr/local/lib/python3.12/dist-packages (from google-api-core->google-generativeai) (1.70.0)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.18.0 in /usr/local/lib/python3.12/dist-packages (from google-api-core->google-generativeai) (2.32.4)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.12/dist-packages (from google-auth>=2.15.0->google-generativeai) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.12/dist-packages (from google-auth>=2.15.0->google-generativeai) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.12/dist-packages (from google-auth>=2.15.0->google-generativeai) (4.9.1)\n",
            "Requirement already satisfied: httplib2<1.0.0,>=0.19.0 in /usr/local/lib/python3.12/dist-packages (from google-api-python-client->google-generativeai) (0.31.0)\n",
            "Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.12/dist-packages (from google-api-python-client->google-generativeai) (0.2.0)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from google-api-python-client->google-generativeai) (4.2.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic->google-generativeai) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.12/dist-packages (from pydantic->google-generativeai) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic->google-generativeai) (0.4.1)\n",
            "Requirement already satisfied: grpcio<2.0.0,>=1.33.2 in /usr/local/lib/python3.12/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.15->google-generativeai) (1.75.0)\n",
            "Requirement already satisfied: grpcio-status<2.0.0,>=1.33.2 in /usr/local/lib/python3.12/dist-packages (from google-api-core[grpc]!=2.0.*,!=2.1.*,!=2.10.*,!=2.2.*,!=2.3.*,!=2.4.*,!=2.5.*,!=2.6.*,!=2.7.*,!=2.8.*,!=2.9.*,<3.0.0dev,>=1.34.1->google-ai-generativelanguage==0.6.15->google-generativeai) (1.71.2)\n",
            "Requirement already satisfied: pyparsing<4,>=3.0.4 in /usr/local/lib/python3.12/dist-packages (from httplib2<1.0.0,>=0.19.0->google-api-python-client->google-generativeai) (3.2.4)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.12/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-generativeai) (0.6.1)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.18.0->google-api-core->google-generativeai) (2025.8.3)\n",
            "‚úÖ Setup complete!\n",
            "Now proceed to Step 2\n"
          ]
        }
      ],
      "source": [
        "# =============================================\n",
        "# TAEKWONDO CERTIFICATE GENERATOR - SETUP\n",
        "# =============================================\n",
        "\n",
        "print(\"üîß Installing required packages...\")\n",
        "!pip install pillow google-generativeai\n",
        "\n",
        "print(\"‚úÖ Setup complete!\")\n",
        "print(\"Now proceed to Step 2\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "YoEV0NP15xsq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================\n",
        "# LOGO UPLOAD VERIFICATION\n",
        "# =============================================\n",
        "\n",
        "import os\n",
        "from PIL import Image\n",
        "\n",
        "print(\"üìÅ Checking uploaded files...\")\n",
        "files = os.listdir('/content/')\n",
        "for file in files:\n",
        "    if file.endswith(('.png', '.jpg', '.jpeg')):\n",
        "        print(f\"‚úÖ Found: {file}\")\n",
        "\n",
        "# Test if we can open images\n",
        "try:\n",
        "    # If you uploaded a logo, replace 'academy_logo.png' with your actual filename\n",
        "    logo = Image.open('/content/Screenshot_20250929_011549_Google.jpg')\n",
        "    print(\"üéâ Logo loaded successfully!\")\n",
        "    display(logo.resize((100, 100)))  # Show small preview\n",
        "except Exception as e:\n",
        "    print(f\"‚ö†Ô∏è Could not load logo: {e}\")\n",
        "\n",
        "print(\"Proceed to Step 3\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SCqybxZS6fPu",
        "outputId": "206acc1f-d9c4-48bf-e85b-c6c4e5131b62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üìÅ Checking uploaded files...\n",
            "‚ö†Ô∏è Could not load logo: [Errno 2] No such file or directory: '/content/Screenshot_20250929_011549_Google.jpg'\n",
            "Proceed to Step 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# =============================================\n",
        "# CERTIFICATE TEMPLATE ENGINE\n",
        "# =============================================\n",
        "\n",
        "from PIL import Image, ImageDraw, ImageFont\n",
        "import os\n",
        "\n",
        "class CertificateGenerator:\n",
        "    def __init__(self):\n",
        "        self.width, self.height = 2480, 3508  # A4 size at 300 DPI\n",
        "        self.templates = {}\n",
        "        \n",
        "    def create_base_template(self):\n",
        "        \"\"\"Create a professional Taekwondo certificate template\"\"\"\n",
        "        # Create white background\n",
        "        img = Image.new('RGB', (self.width, self.height), color='white')\n",
        "        draw = ImageDraw.Draw(img)\n",
        "        \n",
        "        # Add decorative border (Gold and Black - Taekwondo colors)\n",
        "        border_margin = 100\n",
        "        draw.rectangle([border_margin, border_margin,\n",
        "                       self.width-border_margin, self.height-border_margin],\n",
        "                      outline='gold', width=15)\n",
        "        \n",
        "        # Add inner black border\n",
        "        draw.rectangle([border_margin+30, border_margin+30,\n",
        "                       self.width-border_margin-30, self.height-border_margin-30],\n",
        "                      outline='black', width=5)\n",
        "        \n",
        "        # Add Taekwondo-themed corner decorations\n",
        "        corner_size = 150\n",
        "        # Top-left corner\n",
        "        draw.rectangle([border_margin, border_margin,\n",
        "                       border_margin+corner_size, border_margin+20], fill='red')\n",
        "        draw.rectangle([border_margin, border_margin,\n",
        "                       border_margin+20, border_margin+corner_size], fill='red')\n",
        "        \n",
        "        # Top-right corner\n",
        "        draw.rectangle([self.width-border_margin-corner_size, border_margin,\n",
        "                       self.width-border_margin, border_margin+20], fill='red')\n",
        "        draw.rectangle([self.width-border_margin-20, border_margin,\n",
        "                       self.width-border_margin, border_margin+corner_size], fill='red')\n",
        "        \n",
        "        # Bottom-left corner\n",
        "        draw.rectangle([border_margin, self.height-border_margin-20,\n",
        "                       border_margin+corner_size, self.height-border_margin], fill='red')\n",
        "        draw.rectangle([border_margin, self.height-border-margin-corner_size,\n",
        "                       border_margin+20, self.height-border_margin], fill='red')\n",
        "        \n",
        "        # Bottom-right corner\n",
        "        draw.rectangle([self.width-border-margin-corner_size, self.height-border_margin-20,\n",
        "                       self.width-border_margin, self.height-border_margin], fill='red')\n",
        "        draw.rectangle([self.width-border_margin-20, self.height-border-margin-corner_size,\n",
        "                       self.width-border_margin, self.height-border_margin], fill='red')\n",
        "        \n",
        "        return img, draw\n",
        "    \n",
        "    def add_certificate_content(self, data, logo_path=None):\n",
        "        \"\"\"Add all content to certificate\"\"\"\n",
        "        img, draw = self.create_base_template()\n",
        "        \n",
        "        # Define positions for each element\n",
        "        positions = {\n",
        "            'headline': (self.width//2, 300),\n",
        "            'academy': (self.width//2, 450),\n",
        "            'presented_to': (self.width//2, 650),\n",
        "            'athlete_name': (self.width//2, 800),\n",
        "            'blank_line': (self.width//2, 850),  # This is where the blank line goes\n",
        "            'achievement': (self.width//2, 1000),\n",
        "            'event_type': (self.width//2, 1150),\n",
        "            'event_name': (self.width//2, 1250),\n",
        "            'event_date': (self.width//2, 1350),\n",
        "            'event_venue': (self.width//2, 1450),\n",
        "            'signature': (self.width//2, 3200)\n",
        "        }\n",
        "        \n",
        "        # Try to load fonts (will use default if not available)\n",
        "        try:\n",
        "            headline_font = ImageFont.truetype(\"arial.ttf\", 120)\n",
        "            name_font = ImageFont.truetype(\"arial.ttf\", 80)\n",
        "            body_font = ImageFont.truetype(\"arial.ttf\", 50)\n",
        "            small_font = ImageFont.truetype(\"arial.ttf\", 40)\n",
        "        except:\n",
        "            print(\"Using default fonts\")\n",
        "            headline_font = ImageFont.load_default()\n",
        "            name_font = ImageFont.load_default()\n",
        "            body_font = ImageFont.load_default()\n",
        "            small_font = ImageFont.load_default()\n",
        "        \n",
        "        # Add Headline\n",
        "        draw.text(positions['headline'], data['headline'],\n",
        "                 fill=data.get('colors', {}).get('headline', 'darkred'),\n",
        "                 font=headline_font, anchor='mm')\n",
        "        \n",
        "        # Add Academy Name\n",
        "        draw.text(positions['academy'], \"PN's TAEKWONDO ACADEMY - PUNE\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        \n",
        "        # Add \"Presented to\"\n",
        "        draw.text(positions['presented_to'], \"This Certificate is Proudly Presented To:\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        \n",
        "        # Add Athlete Name Area with Blank Line\n",
        "        name_y = positions['athlete_name'][1]\n",
        "        draw.text((self.width//2, name_y), data['athlete_name'],\n",
        "                 fill='navy', font=name_font, anchor='mm')\n",
        "        \n",
        "        # ADD THE BLANK LINE for handwritten names\n",
        "        blank_line_y = positions['blank_line'][1]\n",
        "        draw.line([(self.width//2 - 200, blank_line_y),\n",
        "                  (self.width//2 + 200, blank_line_y)],\n",
        "                 fill='black', width=3)\n",
        "        \n",
        "        # Add Achievement\n",
        "        achievement_text = f\"Achievement: {data['achievement']}\"\n",
        "        draw.text(positions['achievement'], achievement_text,\n",
        "                 fill='darkgreen', font=body_font, anchor='mm')\n",
        "        \n",
        "        # Add Event Details\n",
        "        draw.text(positions['event_type'], f\"Discipline: {data['event_type']}\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        draw.text(positions['event_name'], f\"Event: {data['event_name']}\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        draw.text(positions['event_date'], f\"Date: {data['event_date']}\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        draw.text(positions['event_venue'], f\"Venue: {data['event_venue']}\",\n",
        "                 fill='black', font=body_font, anchor='mm')\n",
        "        \n",
        "        # Add Signature Line\n",
        "        draw.text(positions['signature'], \"Head Instructor, PN's Taekwondo Academy\",\n",
        "                 fill='black', font=small_font, anchor='mm')\n",
        "        \n",
        "        # Add logo if available\n",
        "        if logo_path and os.path.exists(logo_path):\n",
        "            try:\n",
        "                logo = Image.open(logo_path)\n",
        "                logo = logo.resize((200, 200))\n",
        "                img.paste(logo, (self.width-300, 150), logo)\n",
        "                print(\"‚úÖ Logo added successfully!\")\n",
        "            except Exception as e:\n",
        "                print(f\"‚ö†Ô∏è Could not add logo: {e}\")\n",
        "        \n",
        "        return img\n",
        "\n",
        "# Create generator instance\n",
        "cert_gen = CertificateGenerator()\n",
        "print(\"‚úÖ Certificate Generator Ready!\")\n",
        "print(\"Proceed to Step 4\")"
      ],
      "metadata": {
        "id": "FDGjR8GX7XM_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================\n",
        "# SIMPLE CERTIFICATE TEST (GUARANTEED WORKING)\n",
        "# =============================================\n",
        "\n",
        "print(\"üéØ Creating SIMPLE certificate test...\")\n",
        "\n",
        "from PIL import Image, ImageDraw, ImageFont\n",
        "\n",
        "# Create a basic certificate (no classes, no complex code)\n",
        "width, height = 800, 600\n",
        "img = Image.new('RGB', (width, height), color='white')\n",
        "draw = ImageDraw.Draw(img)\n",
        "\n",
        "# Add a border\n",
        "draw.rectangle([10, 10, width-10, height-10], outline='gold', width=5)\n",
        "\n",
        "# Add text elements\n",
        "draw.text((width//2, 50), \"CERTIFICATE OF ACHIEVEMENT\", fill='darkred', anchor='mm')\n",
        "draw.text((width//2, 100), \"PN's TAEKWONDO ACADEMY\", fill='black', anchor='mm')\n",
        "draw.text((width//2, 180), \"Awarded To:\", fill='black', anchor='mm')\n",
        "draw.text((width//2, 220), \"___________________\", fill='blue', anchor='mm')  # BLANK NAME LINE\n",
        "draw.text((width//2, 280), \"Gold Medal - Kyorugi\", fill='darkgreen', anchor='mm')\n",
        "draw.text((width//2, 320), \"Spring Championship 2024\", fill='black', anchor='mm')\n",
        "draw.text((width//2, 360), \"March 15, 2024 - Seoul Sports Complex\", fill='black', anchor='mm')\n",
        "draw.text((width//2, 500), \"Head Instructor\", fill='black', anchor='mm')\n",
        "\n",
        "# Save the image\n",
        "img.save('/content/simple_certificate.png')\n",
        "print(\"‚úÖ SIMPLE certificate created and saved!\")\n",
        "\n",
        "# Display it\n",
        "from IPython.display import Image as IPImage\n",
        "display(IPImage('/content/simple_certificate.png'))\n",
        "\n",
        "print(\"üéâ If you can see this image, the basic system works!\")\n",
        "print(\"Now we can make it more advanced.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 686
        },
        "id": "mua2S9wB-mjv",
        "outputId": "21de0c46-722d-410f-d868-a3cd1910ded9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üéØ Creating SIMPLE certificate test...\n",
            "‚úÖ SIMPLE certificate created and saved!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üéâ If you can see this image, the basic system works!\n",
            "Now we can make it more advanced.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================\n",
        "# ‚ö° ULTRA-FAST CERTIFICATE GENERATOR\n",
        "# =============================================\n",
        "\n",
        "from PIL import Image, ImageDraw\n",
        "from datetime import datetime\n",
        "\n",
        "def ultra_fast_certificate(medal_type, event_type):\n",
        "    \"\"\"Generate certificate in 1 second\"\"\"\n",
        "\n",
        "    # Map inputs to designs\n",
        "    designs = {\n",
        "        'gold': {'headline': 'GRAND CHAMPION', 'color': 'darkred'},\n",
        "        'silver': {'headline': 'EXCELLENCE AWARD', 'color': 'navy'},\n",
        "        'bronze': {'headline': 'ACHIEVEMENT AWARD', 'color': 'darkgreen'}\n",
        "    }\n",
        "\n",
        "    design = designs.get(medal_type, designs['gold'])\n",
        "\n",
        "    # Create certificate\n",
        "    width, height = 800, 600\n",
        "    img = Image.new('RGB', (width, height), color='white')\n",
        "    draw = ImageDraw.Draw(img)\n",
        "\n",
        "    # Simple design\n",
        "    draw.rectangle([10, 10, width-10, height-10], outline='gold', width=5)\n",
        "    draw.text((width//2, 60), design['headline'], fill=design['color'], anchor='mm')\n",
        "    draw.text((width//2, 120), \"PN's TAEKWONDO ACADEMY\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 200), \"Awarded To:\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 250), \"___________________\", fill='blue', anchor='mm')  # BLANK\n",
        "    draw.text((width//2, 320), f\"{medal_type.title()} Medal - {event_type}\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 500), \"Head Instructor\", fill='black', anchor='mm')\n",
        "\n",
        "    # Save\n",
        "    filename = f\"/content/ultra_fast_{medal_type}.png\"\n",
        "    img.save(filename)\n",
        "\n",
        "    from IPython.display import Image as IPImage\n",
        "    display(IPImage(filename))\n",
        "    print(f\"‚úÖ ULTRA-FAST {medal_type.upper()} CERTIFICATE!\")\n",
        "\n",
        "# Generate instantly:\n",
        "ultra_fast_certificate('gold', 'Kyorugi')\n",
        "ultra_fast_certificate('silver', 'Poomsae')\n",
        "ultra_fast_certificate('bronze', 'Tournament')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "meYa9goWEFWq",
        "outputId": "0b371675-e300-4a42-c97b-77642c687da8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ ULTRA-FAST GOLD CERTIFICATE!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ ULTRA-FAST SILVER CERTIFICATE!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ ULTRA-FAST BRONZE CERTIFICATE!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================\n",
        "# ‚ö° BATCH CERTIFICATE GENERATOR\n",
        "# =============================================\n",
        "\n",
        "from PIL import Image, ImageDraw\n",
        "\n",
        "print(\"üéØ GENERATING ALL CERTIFICATES IN BATCH...\")\n",
        "\n",
        "def generate_all_certificates():\n",
        "    \"\"\"Generate ALL template certificates at once\"\"\"\n",
        "\n",
        "    templates = {\n",
        "        'gold': {'headline': 'GRAND CHAMPION', 'color': 'darkred', 'border': 'gold'},\n",
        "        'silver': {'headline': 'EXCELLENCE AWARD', 'color': 'navy', 'border': 'silver'},\n",
        "        'bronze': {'headline': 'ACHIEVEMENT AWARD', 'color': 'darkgreen', 'border': '#CD7F32'}\n",
        "    }\n",
        "\n",
        "    for medal_type, design in templates.items():\n",
        "        # Ultra-fast generation\n",
        "        img = Image.new('RGB', (800, 600), color='white')\n",
        "        draw = ImageDraw.Draw(img)\n",
        "\n",
        "        # Simple design\n",
        "        draw.rectangle([10, 10, 790, 590], outline=design['border'], width=5)\n",
        "        draw.text((400, 60), design['headline'], fill=design['color'], anchor='mm')\n",
        "        draw.text((400, 120), \"PN's TAEKWONDO ACADEMY\", fill='black', anchor='mm')\n",
        "        draw.text((400, 180), \"Awarded To: ___________________\", fill='blue', anchor='mm')\n",
        "        draw.text((400, 240), f\"{medal_type.title()} Medal\", fill=design['color'], anchor='mm')\n",
        "        draw.text((400, 500), \"Head Instructor\", fill='black', anchor='mm')\n",
        "\n",
        "        filename = f\"/content/{medal_type}_certificate.png\"\n",
        "        img.save(filename)\n",
        "        print(f\"‚úÖ {medal_type.upper()} certificate generated!\")\n",
        "\n",
        "# Generate ALL certificates in 2 seconds\n",
        "generate_all_certificates()\n",
        "\n",
        "# Display all generated certificates\n",
        "from IPython.display import Image as IPImage, display\n",
        "print(\"\\nüìÅ ALL GENERATED CERTIFICATES:\")\n",
        "for medal in ['gold', 'silver', 'bronze']:\n",
        "    display(IPImage(f\"/content/{medal}_certificate.png\"))"
      ],
      "metadata": {
        "id": "MNTZJ8luJl4Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "2fe707ee-b2ec-4613-c085-fbe2b38a7d2e"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üéØ GENERATING ALL CERTIFICATES IN BATCH...\n",
            "‚úÖ GOLD certificate generated!\n",
            "‚úÖ SILVER certificate generated!\n",
            "‚úÖ BRONZE certificate generated!\n",
            "\n",
            "üìÅ ALL GENERATED CERTIFICATES:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =============================================\n",
        "# üöÄ ONE-CLICK CERTIFICATE FACTORY\n",
        "# =============================================\n",
        "\n",
        "from PIL import Image, ImageDraw\n",
        "import time\n",
        "\n",
        "print(\"üè≠ STARTING ONE-CLICK CERTIFICATE FACTORY...\")\n",
        "print(\"‚ö° Generating ALL certificates in ONE click...\")\n",
        "start_time = time.time()\n",
        "\n",
        "# Create ALL certificate templates in one go\n",
        "certificate_data = [\n",
        "    {\n",
        "        'medal': 'GOLD',\n",
        "        'headline': 'GRAND CHAMPION',\n",
        "        'primary_color': 'darkred',\n",
        "        'border_color': 'gold',\n",
        "        'filename': 'gold_champion.png'\n",
        "    },\n",
        "    {\n",
        "        'medal': 'SILVER',\n",
        "        'headline': 'EXCELLENCE AWARD',\n",
        "        'primary_color': 'navy',\n",
        "        'border_color': 'silver',\n",
        "        'filename': 'silver_excellence.png'\n",
        "    },\n",
        "    {\n",
        "        'medal': 'BRONZE',\n",
        "        'headline': 'ACHIEVEMENT AWARD',\n",
        "        'primary_color': 'darkgreen',\n",
        "        'border_color': '#CD7F32',  # Bronze color\n",
        "        'filename': 'bronze_achievement.png'\n",
        "    }\n",
        "]\n",
        "\n",
        "def create_certificate_template(data):\n",
        "    \"\"\"Create one certificate template - optimized for speed\"\"\"\n",
        "    width, height = 800, 600\n",
        "    img = Image.new('RGB', (width, height), color='white')\n",
        "    draw = ImageDraw.Draw(img)\n",
        "\n",
        "    # Simple professional border\n",
        "    draw.rectangle([10, 10, width-10, height-10], outline=data['border_color'], width=6)\n",
        "    draw.rectangle([20, 20, width-20, height-20], outline='black', width=2)\n",
        "\n",
        "    # Certificate content\n",
        "    draw.text((width//2, 60), data['headline'], fill=data['primary_color'], anchor='mm')\n",
        "    draw.text((width//2, 120), \"PN's TAEKWONDO ACADEMY\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 160), \"PUNE ‚Ä¢ EST. 2024\", fill='gray', anchor='mm')\n",
        "    draw.text((width//2, 220), \"This Certificate is Awarded To:\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 270), \"_________________________\", fill='blue', anchor='mm')  # BLANK NAME\n",
        "    draw.text((width//2, 320), f\"{data['medal']} Medal\", fill=data['primary_color'], anchor='mm')\n",
        "    draw.text((width//2, 370), \"For Outstanding Martial Arts Achievement\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 470), \"Head Instructor\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 500), \"PN's Taekwondo Academy\", fill='black', anchor='mm')\n",
        "    draw.text((width//2, 540), \"Date: ___________________\", fill='black', anchor='mm')\n",
        "\n",
        "    return img, data['filename']\n",
        "\n",
        "# GENERATE ALL CERTIFICATES\n",
        "generated_files = []\n",
        "for data in certificate_data:\n",
        "    img, filename = create_certificate_template(data)\n",
        "    img.save(f'/content/{filename}')\n",
        "    generated_files.append(filename)\n",
        "    print(f\"‚úÖ {data['medal']} certificate generated!\")\n",
        "\n",
        "end_time = time.time()\n",
        "total_time = end_time - start_time\n",
        "\n",
        "print(\"\\n\" + \"=\"*60)\n",
        "print(f\"üéâ CERTIFICATE FACTORY COMPLETE!\")\n",
        "print(f\"‚è±Ô∏è  Total generation time: {total_time:.2f} seconds\")\n",
        "print(f\"üìÅ Generated {len(generated_files)} professional certificates:\")\n",
        "for file in generated_files:\n",
        "    print(f\"   üìÑ {file}\")\n",
        "print(\"=\"*60)\n",
        "\n",
        "# DISPLAY ALL GENERATED CERTIFICATES\n",
        "print(\"\\nüñºÔ∏è  DISPLAYING ALL CERTIFICATES:\")\n",
        "from IPython.display import Image as IPImage, display\n",
        "\n",
        "for file in generated_files:\n",
        "    print(f\"\\nüèÖ {file.upper().replace('_', ' ').replace('.PNG', '')}:\")\n",
        "    display(IPImage(f'/content/{file}'))\n",
        "\n",
        "print(\"\\nüí° TIP: Download all certificates from the file explorer on the left!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ALG4WAEo8PYS",
        "outputId": "6d6515bd-38cb-42dc-e7bb-2f93a7b7c3e9"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üè≠ STARTING ONE-CLICK CERTIFICATE FACTORY...\n",
            "‚ö° Generating ALL certificates in ONE click...\n",
            "‚úÖ GOLD certificate generated!\n",
            "‚úÖ SILVER certificate generated!\n",
            "‚úÖ BRONZE certificate generated!\n",
            "\n",
            "============================================================\n",
            "üéâ CERTIFICATE FACTORY COMPLETE!\n",
            "‚è±Ô∏è  Total generation time: 0.08 seconds\n",
            "üìÅ Generated 3 professional certificates:\n",
            "   üìÑ gold_champion.png\n",
            "   üìÑ silver_excellence.png\n",
            "   üìÑ bronze_achievement.png\n",
            "============================================================\n",
            "\n",
            "üñºÔ∏è  DISPLAYING ALL CERTIFICATES:\n",
            "\n",
            "üèÖ GOLD CHAMPION:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üèÖ SILVER EXCELLENCE:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üèÖ BRONZE ACHIEVEMENT:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "üí° TIP: Download all certificates from the file explorer on the left!\n"
          ]
        }
      ]
    }
  ]
}